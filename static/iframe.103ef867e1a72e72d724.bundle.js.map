{"version":3,"file":"static/iframe.103ef867e1a72e72d724.bundle.js","sources":["webpack:///./src/lib/Row/Row.js"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport default class Row extends React.Component {\n    static propTypes = {\n        /**\n         * Row index number\n         */\n        index: PropTypes.number,\n        /**\n         * Row style object\n         */\n        style: PropTypes.object,\n        /**\n         * Table columns array\n         */\n        children: PropTypes.array,\n        /**\n         * Row className determine function\n         */\n        rowClassName: PropTypes.func,\n        /**\n         * Function to get cell value\n         */\n        getDataRowItem: PropTypes.func,\n        /**\n         * Function to get column width\n         */\n        getColumnWidth: PropTypes.func,\n        /**\n         * Function to get row data item\n         */\n        getDataRow: PropTypes.func,\n        /**\n         *  Mouse actions\n         */\n        onClick: PropTypes.func,\n        onDoubleClick: PropTypes.func,\n        onMouseOver: PropTypes.func,\n        onMouseOut: PropTypes.func,\n        onRightClick: PropTypes.func,\n    };\n    render() {\n        let { rowData, index, rowClassName, style, getDataRowItem, getColumnWidth, children } = this.props;\n\n        const evenClassName = index % 2 === 0 ? 'VTRowOdd' : 'VTRowEven';\n        const customClassName = rowClassName && rowClassName(index);\n\n        let idx = 0;\n        return (\n            <div className={classNames('VTRow', evenClassName, customClassName)} style={style}>\n                {React.Children.map(children, child => {\n                    if (!child) {\n                        return null;\n                    }\n                    const { cellRenderer, dataKey } = child.props;\n                    const width = getColumnWidth(idx);\n\n                    let content;\n                    if (cellRenderer) {\n                        content = cellRenderer({ dataKey, rowData, columnIndex: idx });\n                    } else {\n                        const contentStr = getDataRowItem({ rowData, dataKey });\n                        content = (\n                            <div className=\"VTCellContent\" title={contentStr}>\n                                {contentStr}\n                            </div>\n                        );\n                    }\n\n                    const getAction = actionName => {\n                        const action = this.props[actionName];\n                        if (action) {\n                            return event => action(event, { rowIndex: index, dataKey, columnIndex: idx, rowData });\n                        }\n                    };\n\n                    idx += 1;\n                    return (\n                        <div\n                            className=\"VTCell\"\n                            style={{ minWidth: width, maxWidth: width }}\n                            onClick={getAction('onClick')}\n                            onDoubleClick={getAction('onDoubleClick')}\n                            onMouseOver={getAction('onMouseOver')}\n                            onMouseOut={getAction('onMouseOut')}\n                            onContextMenu={getAction('onRightClick')}\n                        >\n                            {content}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n"],"mappings":"AAIA","sourceRoot":""}